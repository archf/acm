#!/bin/sh
#
# ansible container management using lxd
#

die_with_status ()
{
  status=$1
  shift
  printf >&2 '%s\n' "$*"
  exit "$status"
}

die ()
{
  die_with_status 1 "$@"
}

debug()
{
  if [ -n "$DEBUG" ]; then
    printf "%s\n" "$*" >&2
  fi
}

usage()
{
  echo "USAGE: $(basename $0) cmd OPTIONS <playbook.yml> -- ANSIBLE-PLAYBOOK-OPTS"
  echo
  echo "  start     start containers"
  echo "  stop      stop containers"
  echo "  restart   restart containers"
  echo "  provision run provisionner against containers (force provisioning)"
  echo "  delete    delete containers"
  echo "  freeze    freeze containers"
  echo "  unfreeze  unfreeze containers"
  echo ""
  echo "OPTIONS:"
  echo "      -i|--inventory  pass inventory file"
  echo "      -v|--Verbose    verbose"
  echo "      -h|--help       show this help menu"
  echo ""
  echo " If no inventory file are provided, inventory defaults to localhost"
  echo "  i.e: localhost ansible_host=localhost ansible_connection=local"
  echo "  This means that the lxd client used will be the one on localhost"
  echo
  echo "ANSIBLE-PLAYBOOK-OPTS:"
  echo "  Must be valid ansible-playbook options. Those will be passed"
  echo "  literally to ansible-playbook"

  die
}

# used to check if playbook does exist
file_exists()
{
  echo $1
  if [ -n ${1} ] && [ -f ${_file} ]; then
    return 0
  else
    echo "acm error: playbook ${1} not found, does file really exists?"
    return 1
  fi
}

 parse_args()
{

  [ $# -eq 0 ] && usage

  while [ $# -gt 0 ]
  do
    case "$1" in
      -i|--inventory) shift; INVENTORY="$1";;
      -v|--verbose) DEBUG=0;;
      stop|halt|start|up|restart|delete|destroy|provision|freeze|unfreeze) cmd="$1";;
      *.yml|*.yaml) PLAYBOOK="$1";;
      -h|--help) usage;;
      --) shift; break ;;
      *) die "Unexpected option: $1" ;;
    esac
    shift
  done

  ANSIBLE_OPTS="$@"

  # args post-processing
  if [ -z $INVENTORY ]; then
    # the comma is required as it signifies it's a list vs a directory/file
    INVENTORY="localhost ansible_host=localhost ansible_connection=local,"
  fi

  # convert cmd to match what ansible expects
  case $cmd in
    start|up) STATE=started ;;
    stop|halt) STATE=stopped ;;
    delete|destroy) STATE=absent ;;
    restart) STATE=restarted ;;
    provision) STATE=provision ;;
    freeze) STATE=frozen ;;
    unfreeze) STATE=started ;;
    *) die "Got unknown state value: $cmd"
  esac

  debug "---------------- DEBUG INFO ----------------"
  debug "Received args: $ARGS"
  debug "inventory file: $INVENTORY"
  debug "state: $STATE"
  debug "playbook file: $PLAYBOOK"
  debug "ansible provisioning opts: $ANSIBLE_OPTS"
  debug "---------------- DEBUG INFO ----------------"

  return 0
}

parse_args $@

[ -n "$DEBUG" ] && set -x
ansible-playbook -i $INVENTORY lxdm.yml -e lxdm_state=${STATE}

if file_exists $PLAYBOOK
then
  if [ ${STATE} = 'provision' ] || [ ${STATE} = 'started' ]
  then
    ansible-playbook -i $INVENTORY ${PLAYBOOK} ${ANSIBLE_OPTS}
  fi
fi
